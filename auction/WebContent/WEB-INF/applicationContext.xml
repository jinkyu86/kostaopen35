<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:p="http://www.springframework.org/schema/p"
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
  
    <bean id="bidDAO" class="kr.or.kosta.auction.bid.BidDAO">
        <property name="sqlSessionTemplate">
            <ref bean="sqlSessionTemplate"/>
        </property>
    </bean>
    <bean id="auctionDAO" class="kr.or.kosta.auction.auction.AuctionDAO">
        <property name="sqlSessionTemplate">
            <ref bean="sqlSessionTemplate"/>
        </property>
    </bean>
    <bean id="memberDAO" class="kr.or.kosta.auction.member.MemberDAO">
        <property name="sqlSessionTemplate">
            <ref bean="sqlSessionTemplate"/>
        </property>
    </bean>
    <bean id="goodDAO" class="kr.or.kosta.auction.good.GoodDAO">
        <property name="sqlSessionTemplate">
            <ref bean="sqlSessionTemplate"/>
        </property>
    </bean>
    <bean id="boardDAO" class="kr.or.kosta.auction.board.BoardDAO">
        <property name="sqlSessionTemplate">
            <ref bean="sqlSessionTemplate"/>
        </property>
    </bean>
    
    
    <bean id="bidService" class="kr.or.kosta.auction.bid.BidService">
        <constructor-arg>
            <ref bean="bidDAO"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="memberDAO"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="auctionDAO"/>
        </constructor-arg>
    </bean>
    <bean id="auctionService" class="kr.or.kosta.auction.auction.AuctionService">
        <constructor-arg>
            <ref bean="auctionDAO"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="bidDAO"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="goodDAO"/>
        </constructor-arg>
    </bean>
    <bean id="goodService" class="kr.or.kosta.auction.good.GoodService">
        <constructor-arg>
            <ref bean="goodDAO"/>
        </constructor-arg>
    </bean>
    <bean id="memberService" class="kr.or.kosta.auction.member.MemberService">
        <constructor-arg>
            <ref bean="memberDAO"/>
        </constructor-arg>
    </bean>
    <bean id="boardService" class="kr.or.kosta.auction.board.BoardService">
        <constructor-arg>
            <ref bean="boardDAO"/>
        </constructor-arg>
		<constructor-arg>
            <ref bean="memberDAO"/>
        </constructor-arg>
    </bean>
    
    <bean id="dataSource"
     class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="oracle.jdbc.driver.OracleDriver"/>
        <property name="url" value="jdbc:oracle:thin:@192.168.0.14:1521:XE"/>
        <property name="username" value="scott"/>
        <property name="password" value="tiger"/>
    </bean>
    
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="/WEB-INF/classes/sqlmap-config.xml"/>
    </bean>
    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
    </bean>
    <!--	
    	<bean id="errorlog" 
		class="kr.or.kosta.aop.ExceptionAdvice"/>
  -->
		<!--AOP 설정에 의해서 스트럿츠가 메서드 호출시 ExceptionAdvice의
		aroundException이 대신 호출
		실행시 에러 발생 -> 스트럿츠가 메서드 실행 전에
					   해당 메서드가 존재 하는지 먼저 체크하고 실행	
					  ExceptionAdvice에는 스트럿츠가 호출한 
					   메서드(viewStudentList()) 없음 
		스트럿츠에서 메서드 존재 여부 체크 못하게 설정
	-->
	<!--
	<aop:config proxy-target-class="true">
		<aop:aspect id="loggingAspect1" ref="errorlog">
			<aop:pointcut id="publicmethod1"
			expression="execution(* kr.or.kosta.*.*.*Service.*(..))"/>
			<aop:around
			pointcut-ref="publicmethod1"
			method="arroundException"/>
		</aop:aspect>
	</aop:config>
	-->
<!--	
	<bean id="loginlog" class="kr.or.kosta.aop.LoginAdvice"/>
	
	<aop:config proxy-target-class="true">
		<aop:aspect id="loggingAspect1" ref="loginlog">
			<aop:pointcut id="publicmethod1" expression="execution(* kr.or.kosta.*.*.*Service.*Form(..))"/>
		
			<aop:pointcut id="publicmethod2" expression="execution(* kr.or.kosta.*.*.*Service.remove*(..))"/>

			<aop:around
			pointcut-ref="publicmethod1"
			method="arroundLogin"/>
			<aop:around
			pointcut-ref="publicmethod2"
			method="arroundLogin"/>
		</aop:aspect>
	</aop:config>
	-->

</beans>